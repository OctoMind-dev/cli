import type { paths, components } from "../api"; // generated by openapi-typescript
import { client, handleError, outputResult } from "./client";

export type listEnvironmentsOptions =
  paths["/apiKey/v2/test-targets/{testTargetId}/environments"]["get"]["parameters"]["path"];
export type PostEnvironmentOptions =
  paths["/apiKey/v2/test-targets/{testTargetId}/environments"]["post"]["requestBody"]["content"]["application/json"] & {
    testTargetId: string;
  };
export type UpdateEnvironmentOptions =
  paths["/apiKey/v2/test-targets/{testTargetId}/environments/{environmentId}"]["patch"]["requestBody"]["content"]["application/json"];
export type EnvironmentResponse = components["schemas"]["EnvironmentResponse"];

export const listEnvironments = async (
  options: listEnvironmentsOptions & { json?: boolean },
): Promise<void> => {
  const { data, error } = await client.GET(
    "/apiKey/v2/test-targets/{testTargetId}/environments",
    {
      params: {
        path: { testTargetId: options.testTargetId },
      },
    },
  );

  handleError(error);

  if (options.json) {
    outputResult(data);
    return;
  }

  console.log("Environments:");
  if (data) {
    data.forEach((environment) => {
      console.log(`- Name: ${environment.name}`);
      console.log(`  ID: ${environment.id}`);
      console.log(`  Discovery URL: ${environment.discoveryUrl}`);
      console.log(`  Updated At: ${environment.updatedAt}`);
    });
  }
};

export const getEnvironments = async (
  options: listEnvironmentsOptions & { json?: boolean },
): Promise<EnvironmentResponse[]> => {
  const { data, error } = await client.GET(
    "/apiKey/v2/test-targets/{testTargetId}/environments",
    {
      params: {
        path: { testTargetId: options.testTargetId },
      },
    },
  );

  handleError(error);

  if (!data) {
    throw new Error("no environments found");
  }

  if (options.json) {
    outputResult(data);
  }

  return data;
};

export const createEnvironment = async (
  options: PostEnvironmentOptions & {
    json?: boolean;
    testAccountUsername?: string;
    testAccountPassword?: string;
    basicAuthUsername?: string;
    basicAuthPassword?: string;
    privateLocationName?: string;
    testAccountOtpInitializerKey?: string;
  },
): Promise<void> => {
  const { data, error } = await client.POST(
    "/apiKey/v2/test-targets/{testTargetId}/environments",
    {
      params: {
        path: { testTargetId: options.testTargetId },
      },
      body: {
        name: options.name,
        discoveryUrl: options.discoveryUrl,
        testAccount: {
          username: options.testAccountUsername,
          password: options.testAccountPassword,
        },
        basicAuth: {
          username: options.basicAuthUsername,
          password: options.basicAuthPassword,
        },
        testAccountOtpInitializerKey: options.testAccountOtpInitializerKey,
        privateLocationName: options.privateLocationName,
        additionalHeaderFields: options.additionalHeaderFields,
      },
    },
  );

  handleError(error);

  const response = data as EnvironmentResponse;

  if (options.json) {
    outputResult(response);
    return;
  }

  console.log("Environment created successfully!");
  console.log(`- Name: ${response.name}`);
  console.log(`  ID: ${response.id}`);
  console.log(`  Discovery URL: ${response.discoveryUrl}`);
  console.log(`  Updated At: ${response.updatedAt}`);
};

export const updateEnvironment = async (
  options: UpdateEnvironmentOptions & {
    testTargetId: string;
    environmentId: string;
    json?: boolean;
    testAccountUsername?: string;
    testAccountPassword?: string;
    basicAuthUsername?: string;
    basicAuthPassword?: string;
    privateLocationName?: string;
    testAccountOtpInitializerKey?: string;
  },
): Promise<void> => {
  const { data, error } = await client.PATCH(
    "/apiKey/v2/test-targets/{testTargetId}/environments/{environmentId}",
    {
      params: {
        path: {
          testTargetId: options.testTargetId,
          environmentId: options.environmentId,
        },
      },
      body: {
        name: options.name,
        discoveryUrl: options.discoveryUrl,
        testAccount: {
          username: options.testAccountUsername,
          password: options.testAccountPassword,
        },
        otpInitializerKey: options.testAccountOtpInitializerKey,
        basicAuth: {
          username: options.basicAuthUsername,
          password: options.basicAuthPassword,
        },
        privateLocationName: options.privateLocationName,
      },
    },
  );

  handleError(error);

  const response = data as EnvironmentResponse;

  if (options.json) {
    outputResult(response);
    return;
  }

  console.log("Environment updated successfully!");
  console.log(`- Name: ${response.name}`);
  console.log(`  ID: ${response.id}`);
  console.log(`  Discovery URL: ${response.discoveryUrl}`);
  console.log(`  Updated At: ${response.updatedAt}`);
};

export const deleteEnvironment = async (options: {
  testTargetId: string;
  environmentId: string;
  json?: boolean;
}): Promise<void> => {
  const { error } = await client.DELETE(
    "/apiKey/v2/test-targets/{testTargetId}/environments/{environmentId}",
    {
      params: {
        path: {
          testTargetId: options.testTargetId,
          environmentId: options.environmentId,
        },
      },
    },
  );

  handleError(error);

  if (options.json) {
    outputResult({ success: true });
    return;
  }

  console.log("Environment deleted successfully!");
};
