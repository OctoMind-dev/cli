import type { components, paths } from "../api"; // generated by openapi-typescript
import { getUrl } from "../url";
import { client, handleError, ListOptions, logJson } from "./client";

export type TestCaseResponse = components["schemas"]["TestCaseResponse"];
export type TestCasesResponse = components["schemas"]["TestCasesResponse"];
export type GetTestCaseParams =
  paths["/apiKey/v2/test-targets/{testTargetId}/test-cases/{testCaseId}"]["get"]["parameters"]["path"];
export type DeleteTestCaseParams =
  paths["/apiKey/v2/test-targets/{testTargetId}/test-cases/{testCaseId}"]["delete"]["parameters"]["path"];

export const deleteTestCase = async (
  options: DeleteTestCaseParams & ListOptions,
): Promise<void> => {
  const { data, error } = await client.DELETE(
    "/apiKey/v2/test-targets/{testTargetId}/test-cases/{testCaseId}",
    {
      params: {
        path: {
          testTargetId: options.testTargetId,
          testCaseId: options.testCaseId,
        },
      },
    },
  );

  handleError(error);

  if (options.json) {
    logJson(data);
    return;
  }

  console.log("Test Case deleted successfully");
};

export const listTestCase = async (
  options: GetTestCaseParams & ListOptions,
): Promise<void> => {
  const { data, error } = await client.GET(
    "/apiKey/v2/test-targets/{testTargetId}/test-cases/{testCaseId}",
    {
      params: {
        path: {
          testTargetId: options.testTargetId,
          testCaseId: options.testCaseId,
        },
      },
    },
  );

  handleError(error);

  const response = data as TestCaseResponse;

  if (options.json) {
    logJson(response);
    return;
  }

  console.log("Test Case Details:");
  console.log(`ID: ${response.id}`);
  console.log(`Description: ${response.description}`);
  console.log(`Status: ${response.status}`);
  console.log(`Run Status: ${response.runStatus}`);
  console.log(`Created At: ${response.createdAt}`);
  console.log(`Updated At: ${response.updatedAt}`);

  if (response.elements && response.elements.length > 0) {
    console.log("\nElements:");
    response.elements.forEach((element, index) => {
      console.log(`\nElement ${index + 1}:`);
      if (element.interaction) {
        console.log(`  Action: ${element.interaction.action}`);
        if (element.interaction.calledWith) {
          console.log(`  Called With: ${element.interaction.calledWith}`);
        }
      }
      if (element.assertion) {
        console.log(`  Expectation: ${element.assertion.expectation}`);
        if (element.assertion.calledWith) {
          console.log(`  Called With: ${element.assertion.calledWith}`);
        }
      }
      console.log("  Selectors:");
      element.selectors?.forEach((selector) => {
        console.log(`    - ${selector.selectorType}: ${selector.selector}`);
        if (selector.options?.name) {
          console.log(`      Name: ${selector.options.name}`);
        }
      });
    });
  }
};

export type GetTestCasesOptions = {
  testTargetId: string;
  status?: string;
};
export const getTestCases = async (
  options: GetTestCasesOptions,
): Promise<TestCasesResponse> => {
  const { data, error } = await client.GET(
    "/apiKey/v2/test-targets/{testTargetId}/test-cases",
    {
      params: {
        path: {
          testTargetId: options.testTargetId,
        },
        query: {
          filter: JSON.stringify({ status: options.status }),
        },
      },
    },
  );

  handleError(error);

  if (!data) {
    throw new Error("no test cases found");
  }

  return data;
};
export const listTestCases = async (
  options: GetTestCasesOptions & ListOptions,
): Promise<void> => {
  if (!options.status) {
    options.status = "ENABLED";
  }
  const testCases = await getTestCases(options);

  if (options.json) {
    logJson(testCases);
    return;
  }

  console.log("Test Cases:");
  for (let idx = 0; idx < testCases.length; idx++) {
    const testCase = testCases[idx];
    const idxString = `${idx + 1}. `.padEnd(
      testCases.length.toString().length + 2,
    );
    const paddingString = " ".repeat(idxString.length);
    console.log(`${idxString}Description: ${testCase.description}`);
    console.log(`${paddingString}ID: ${testCase.id}`);
    console.log(
      `${paddingString}${await getUrl({
        testCaseId: testCase.id,
        entityType: "test-case",
      })}`,
    );
  }
};
