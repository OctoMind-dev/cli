import type { paths, components } from "../api"; // generated by openapi-typescript
import { client, handleError, outputResult } from "./client";

export type TestCaseResponse = components["schemas"]["TestCaseResponse"];
export type TestCasesResponse = components["schemas"]["TestCasesResponse"];
export type getTestCaseParams =
  paths["/apiKey/v2/test-targets/{testTargetId}/test-cases/{testCaseId}"]["get"]["parameters"]["path"];

export const getTestCase = async (
  options: getTestCaseParams & { json?: boolean },
): Promise<void> => {
  const { data, error } = await client.GET(
    "/apiKey/v2/test-targets/{testTargetId}/test-cases/{testCaseId}",
    {
      params: {
        path: {
          testTargetId: options.testTargetId,
          testCaseId: options.testCaseId,
        },
      },
    },
  );

  handleError(error);

  const response = data as TestCaseResponse;

  if (options.json) {
    outputResult(response);
    return;
  }

  console.log("Test Case Details:");
  console.log(`ID: ${response.id}`);
  console.log(`Description: ${response.description}`);
  console.log(`Status: ${response.status}`);
  console.log(`Run Status: ${response.runStatus}`);
  console.log(`Created At: ${response.createdAt}`);
  console.log(`Updated At: ${response.updatedAt}`);

  if (response.elements && response.elements.length > 0) {
    console.log("\nElements:");
    response.elements.forEach((element, index) => {
      console.log(`\nElement ${index + 1}:`);
      if (element.interaction) {
        console.log(`  Action: ${element.interaction.action}`);
        if (element.interaction.calledWith) {
          console.log(`  Called With: ${element.interaction.calledWith}`);
        }
      }
      if (element.assertion) {
        console.log(`  Expectation: ${element.assertion.expectation}`);
        if (element.assertion.calledWith) {
          console.log(`  Called With: ${element.assertion.calledWith}`);
        }
      }
      console.log("  Selectors:");
      element.selectors?.forEach((selector) => {
        console.log(`    - ${selector.selectorType}: ${selector.selector}`);
        if (selector.options?.name) {
          console.log(`      Name: ${selector.options.name}`);
        }
      });
    });
  }
};

export const getTestCases = async (options: {
  testTargetId: string;
  status?: string;
  json?: boolean;
}): Promise<TestCasesResponse> => {
  const { data, error } = await client.GET(
    "/apiKey/v2/test-targets/{testTargetId}/test-cases",
    {
      params: {
        path: {
          testTargetId: options.testTargetId,
        },
        query: {
          filter: JSON.stringify({ status: options.status }),
        },
      },
    },
  );

  handleError(error);

  if (!data) {
    throw new Error("no test cases found");
  }

  if (options.json) {
    outputResult(data);
  }

  return data;
};
