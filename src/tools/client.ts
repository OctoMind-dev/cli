import createClient, { Middleware } from "openapi-fetch";

import type { components, paths } from "../api"; // generated by openapi-typescript
import { loadConfig } from "../config";

export const BASE_URL =
  process.env.OCTOMIND_API_URL || "https://app.octomind.dev/api";
type ErrorResponse =
  | components["schemas"]["ZodResponse"]
  | string
  | { status: "error"; error: string }
  | { status: "has dependencies"; dependencyIds: string[] }
  | undefined;

const client = createClient<paths>({ baseUrl: BASE_URL });

const authMiddleware: Middleware = {
  async onRequest({ request }) {
    const { apiKey } = await loadConfig();
    if (!apiKey) {
      throw new Error(
        "API key is required. Please configure it first by running 'octomind init'",
      );
    }
    request.headers.set("x-api-key", apiKey);
    return request;
  },
  async onResponse({ response }) {
    const { body, ...resOptions } = response;
    if (!response.ok) {
      const res = new Response(body, resOptions);
      const errorBody = await res.text();
      return new Response(
        `${response.status}, ${response.statusText}: ${errorBody ? errorBody : ""}`,
        { ...resOptions, status: response.status },
      );
    }
    return response;
  },
  onError({ error }) {
    console.error(error);
    process.exit(1);
  },
};

client.use(authMiddleware);

export { client };

export const handleError = (error: ErrorResponse) => {
  if (error) {
    console.error(error);
    if (typeof error === "string" && error.startsWith("403")) {
      console.error("You are not authorized. Check your API key or do a 'octomind init' to set it up.");
    }
    process.exit(1);
  }
};

export type ListOptions = {
  json?: boolean;
};
export const logJson = (result: unknown): void => {
  console.log(JSON.stringify(result, null, 2));
};
